<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="robots" content="noindex, nofollow, noarchive">
<title>Inventory</title>
<script type="text/javascript">// <font color="red">Your browser doesn't seem to support JavaScript</font><!--
  "use strict";
  var $;
  if (document.getElementById) {
    $ = function (id) { return document.getElementById(id) };
  } else {
    $ = function (id) {
      var element = document.all[id];
      return (typeof element == "undefined" ? null : element);
    };
  }

  var isIE = !!(window.navigator.userAgent.indexOf("MSIE ") >= 0 || document.documentMode);

  // From "JavaScript: The Definitive Guide, 5th Edition"
  if (!Function.prototype.apply) {
    Function.prototype.apply = function (object, parameters) {
      var f = this;
      var o = object || window;
      var args = parameters || [];
      o._$_apply_$_ = f;
      var stringArgs = [];
      for (var i = 0; i < args.length; i++)
        stringArgs[i] = "args[" + i + "]";
      var arglist = stringArgs.join(",");
      var methodcall = "o._$_apply_$_(" + arglist + ");";
      var result = eval(methodcall);
      delete o._$_apply_$_;
      return result;
    };
  }

  if (!Function.prototype.call) {
    Function.prototype.call = function (object) {
      var f = this;
      var o = object || window;
      o._$_call_$_ = f;
      var stringArgs = [];
      for (var i = 1; i < arguments.length; i++)
        stringArgs[i - 1] = "arguments[" + i + "]";
      var arglist = stringArgs.join(",");
      var methodcall = "o._$_call_$_(" + arglist + ");";
      var result = eval(methodcall);
      delete o._$_call_$_;
      return result;
    };
  }

  if (!Object.prototype.hasOwnProperty) {
    Object.prototype.hasOwnProperty = function (property) {
      return true;
    };
  }

  if (!Array.prototype.push) {
    Array.prototype.push = function (element) {
      var a = this;
      var l = a.length;
      a[l] = element;
      return l + 1;
    };
  }

  if ("a".replace("a", function (c) { return "b"; }) != "b") {
    var string_replace = String.prototype.replace;
    String.prototype.replace = function (r, f) {
      var s = this;
      if (typeof f != "function")
        return string_replace.call(s, r, f);
      var s1 = string_replace.call(s, r, "@");
      var s2 = string_replace.call(s, r, "?");
      var res = "";
      var from = 0, to = 0;
      for (var i = 0; i < s1.length; ++i) {
        if (s1.charAt(i) == s2.charAt(i)) {
          ++to;
        } else {
          res += s.substring(from, to);
          if (typeof r == "string") {
            res += f(s.substring(to, to + r.length));
            to += r.length;
          } else {
            var m = s.substring(to).match(r);
            res += f(m[0]);
            to += m[0].length;
          }
          from = to;
        }
      }
      if (from != to)
        res += s.substring(from, to);
      return res;
    };
  }

  function log(text, style) {
    if (typeof log.content == "undefined")
      log.content = "";
    text = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    if (style)
      text = '<span style="' + style + '">' + text + '</span>';
    log.content += text + "\n";
    var logBar = $("logBar");
    if (logBar) {
      if (isIE)
        logBar.outerHTML = '<pre id="logBar">' + log.content + '</pre>';
      else
        logBar.innerHTML = log.content;
    } else {
      log.needUpdate = true;
    }
  }

  /*if (typeof XMLHttpRequest == "undefined") {
    XMLHttpRequest = function () {
      var msXMLs = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
      for (var i = 0; i < msXMLs.length; ++i) {
        log("XMLHttpRequest: creating '" + msXMLs[i] + "'");
        var xhr = new ActiveXObject(msXMLs[i]);
        log("XMLHttpRequest: -> " + typeof xhr);
        if (xhr)
          return xhr;
      }
      log("XMLHttpRequest: Cannot create XHR" + xhr, "color:red;");
      return null;
    }
  }*/

  function asyncInitXMLHttpRequest(arg) {
    if (typeof XMLHttpRequest != "undefined") {
      
    }
  }

  function init() {
    log("init()");
    var o = JSON.parse('[{"key1": "value1", "key2": "value2"}, {}]');
    log("init: JSON.parse -> " + o);
    o = {a:1, b:"value", "2":"x"};
    for (var i in o) {
      log("i = " + typeof i + ": " + i + " -> " + o[i]);
    }
    tryCatch({
      tryFunc: function () {
        log("tryFunc");
        document.xxxxxxxx();
      }, catchFunc: function (e) {
        log("catchFunc(" + e + ")");
      }, finallyFunc: function () {
        log("finallyFunc");
      }, okFunc: function () {
        log("okFunc");
      }
    });
    log("o.length = " + o.length);
    var j = JSON.stringify([{"1":"2 123"}, false, true, null, {}, "hello", []]);
    log("init: JSON.stringify -> " + j);
    /*asyncInitXMLHttpRequest({nextInit: function () {
      var xhr = new XMLHttpRequest();
      var dbConnectOpts = window.localStorage ? window.localStorage.getItem("db-connect") : null;
      if (dbConnectOpts) {
        dbConnectOpts = JSON.parse(dbConnectOpts);
        log("init: dbConnectOpts = '" + dbConnectOpts + "'", "color:red;");
        if (!gh.init(dbConnectOpts)) {
          modules.load();
          return;
        }
      }
      modules.load("dbConnect");
    }});*/
  }

  window.onload = function () {
    if (init.done)
      return;
    init.done = true;
    init();
  };

  if (document.addEventListener)
    document.addEventListener("DOMContentLoaded", window.onload, false);

  // Error handling

  var tryCatch, tryFinally, throwException;
  var asyncErrorHandler = null;
  var asyncException = null;

  function asyncInitErrorHanding() {
    if (typeof Error == "undefined") {
      Error = function (message) {
        this.message = message;
      };
      Error.prototype.toString = function () {
        return "Error: " + this.message;
      };
    }
    if (typeof SyntaxError == "undefined")
      SyntaxError = Error;
    asyncErrorHandler = {
      catchFunc: function () {
        log("asyncInitErrorHanding: use async error handling via window.onerror");
        tryCatch = tryCatchAsync;
        tryFinally = tryFinallyAsync;
        throwException = throwExceptionAsync;
      },
      prev: null
    };
    eval("tryCatch = function (arg) {\n" +
         "  if (!arg.catchFunc) throw new Error(\"No catchFunc provided for tryCatch()\");\n" +
         "  try {\n" +
         "    arg.tryFunc();\n" +
         "  } catch (e) {\n" +
         "    arg.catchFunc(e);\n" +
         "  } finally {\n" +
         "    if (arg.finallyFunc) arg.finallyFunc();\n" +
         "  }\n" +
         "  if (arg.okFunc) arg.okFunc();\n" +
         "};\n" +
         "tryFinally = function (arg) {\n" +
         "  if (!arg.finallyFunc) throw new Error(\"No finallyFunc provided for tryFinally()\");\n" +
         "  try {\n" +
         "    arg.tryFunc();\n" +
         "  } finally {\n" +
         "    arg.finallyFunc();\n" +
         "  }\n" +
         "  if (arg.okFunc) arg.okFunc();\n" +
         "};\n" +
         "throwException = function (e) {\n" +
         "  throw e;\n" +
         "};\n");
    asyncErrorHandler = null;
    log("asyncInitErrorHanding: use native error handling");
  }

  function tryCatchAsync(arg) {
    if (!arg.catchFunc)
      throwException(new Error("tryCatchAsync: No catchFunc provided for tryCatch()"));
    var prevHandler = asyncErrorHandler;
    asyncErrorHandler = {
      catchFunc: arg.catchFunc,
      finallyFunc: arg.finallyFunc,
      okFunc: arg.okFunc,
      prev: prevHandler
    };
    arg.tryFunc();
    asyncErrorHandler = asyncErrorHandler.prev;
    if (arg.finallyFunc) arg.finallyFunc();
    if (arg.okFunc) arg.okFunc();
  }

  function tryFinallyAsync(arg) {
    if (!arg.finallyFunc)
      throwException(new Error("tryFinallyAsync: No finallyFunc provided for tryFinally()"));
    var prevHandler = asyncErrorHandler;
    asyncErrorHandler = {
      finallyFunc: arg.finallyFunc,
      okFunc: arg.okFunc,
      prev: prevHandler
    };
    arg.tryFunc();
    asyncErrorHandler = asyncErrorHandler.prev;
    if (arg.finallyFunc) arg.finallyFunc();
    if (arg.okFunc) arg.okFunc();
  }

  function throwExceptionAsync(e) {
    log("throwExceptionAsync('" + e + "')");
    asyncException = e;
    eval("throw asyncException;");
  }

  window.onerror = function (message, source, lineno, colno, error) {
    var str = message;
    if (source) {
      str += " (at " + source;
      if (typeof lineno != "undefined")
        str += ":" + lineno;
      if (typeof colno != "undefined")
        str += ":" + colno;
      str += ")";
    }
    if (error && error.stack)
      str += "\n" + error.stack;
    log("window.onerror: " + str, asyncErrorHandler ? "color:orange;" : "color:red;");
    while (asyncErrorHandler) {
      var action = asyncErrorHandler;
      var actionCatchFunc = asyncErrorHandler.catchFunc;
      asyncErrorHandler.catchFunc = null;
      if (actionCatchFunc) actionCatchFunc(asyncException);
      asyncErrorHandler = action.prev;
      if (action.finallyFunc) action.finallyFunc();
      if (actionCatchFunc) {
        if (action.okFunc) action.okFunc();
        return true;
      }
    }
  };

  // Single-page application modules (TODO: rename to subpages? forms?)

  var modules = {
    load: function (newModule) {
      var hash = window.location.hash.replace(/^#/, "");
      log("modules.load(newModule=" + newModule + "): hash='" + hash + "'");
      if (!newModule)
        newModule = hash;
      if (!newModule)
        newModule = "main";
      if (modules.current === newModule) {
        log("modules.load: skip loading '" + newModule + "'", "color:gray;");
        return;
      }
      log("modules.load: loading '" + newModule + "'");
      modules.current = newModule;
      modules[newModule]();
      if (hash != newModule)
        window.location.replace("#" + newModule);
    }
  }

  modules.dbConnect = function () {
    $("mainContent").innerHTML =
      '<form name="dbConnect" action="javascript:void(0);" onsubmit="return modules.dbConnect.onSubmit(this);">' +
        '<label for="dbConnectURL">URL:</label>' +
        '<input type="text" id="dbConnectURL"' +
        ' pattern="' + modules.dbConnect.urlPattern + '"' +
        ' title="GitHub is supported only" required/>' + '<br>' +
        '<label for="dbConnectToken">Token:</label>' +
        '<input type="password" id="dbConnectToken" required/>' + '<br>' +
        '<button type="submit">Connect</button>' +
      '</form>';
  }

  modules.dbConnect.urlPattern = "(https:\\/\\/)(github[.]com)\\/([a-zA-Z0-9_.\\-]+)\\/([a-zA-Z0-9_.\\-]+)";

  modules.dbConnect.onSubmit = function (form) {
    var dbConnectURL = $("dbConnectURL");
    var dbConnectToken = $("dbConnectToken");
    if (!dbConnectURL.value || !dbConnectToken.value) {
      alert("A mandatory field is empty.");
      (!dbConnectURL.value ? dbConnectURL : dbConnectToken).focus();
      return false;
    }
    var dbConnectOpts = {
      url: dbConnectURL.value,
      token: dbConnectToken.value
    };
    var res;
    if (!!(res = gh.init(dbConnectOpts))) {
      alert(res);
      dbConnectURL.focus();
      return false;
    }
    if (window.localStorage)
      window.localStorage.setItem("db-connect", JSON.stringify(dbConnectOpts));
    modules.load("main");
    return true;
  }

  var gh = {
    init: function (dbConnectOpts) {
      var m = dbConnectOpts.url.match(modules.dbConnect.urlPattern);
      if (!m || m.length !== 5)
        return "Invalid GitHub URL: '" + dbConnectOpts.url + "'";
      this.apiBaseUrl = m[1] + "api." + m[2]; // + "/api/v3"
      this.user = m[3];
      this.repo = m[4];
      this.token = dbConnectOpts.token;
    },
    connect: function () {
      this.xhr = new XMLHttpRequest();
      this.xhr.open("GET", gh.apiBaseUrl + "/repos/" + gh.user + "/" + gh.repo, true);
      this.xhr.setRequestHeader("Accept", "application/vnd.github+json");
      this.xhr.setRequestHeader("X-GitHub-Api-Version", "2022-11-28");
      this.xhr.setRequestHeader("Authorization", "token " + gh.token);
      this.xhr.onreadystatechange = function (arg) {
        log("modules.main: xhr.onreadystatechange(readyState=" + this.readyState + ")");
        if (this.readyState != 4)
          return;
        log("modules.main: xhr.onreadystatechange: " + this.status,
                     this.status >= 400 ? "color:orangered;" : this.status >= 300 ? "color:orange;" : "color:green;");
        log("modules.main: xhr.onreadystatechange: headers:\n" + this.getAllResponseHeaders(), "color:gray;");
        log("modules.main: xhr.onreadystatechange: response:\n" + this.responseText, "color:dimgray;");
        $("repoStatus").innerHTML = "default_branch = '" + JSON.parse(this.responseText)["default_branch"] + "'";
      }
      this.xhr.send();
    }
  };

  modules.main = function () {
    $("mainContent").innerHTML =
      '<div id="main">' +
        '<table border="1" cellpadding="1" cellspacing="2" id="main">' +
          '<thead>' +
            '<th>1</th>' + '<th>2</th>' +
          '</thead>' +
          '<tbody>' +
            '<tr>' + '<td>1</td>' + '<td>2</td>' + '</tr>' +
          '</tbody>'
        '</table>' +
      '</div>';
    log("modules.main():");
  }

  window.onhashchange = function () {
    log("window.onhashchange: hash='" + window.location.hash + "'");
    modules.load();
  }

  asyncInitErrorHanding();
//--></script>
<script type="text/javascript" src="json2.js"></script>
</head>
<body>
<div id="mainContent"></div>
<pre id="logBar"><noscript style="color:red;">Please enable JavaScript in your browser otherwise this site won't work properly.</noscript>
<script type="text/javascript">//<!--
if (typeof document == "undefined" || !document.getElementById && !document.all)
  document.write("Your browser is too old to support HTML DOM API in JavaScript.\n");
if (typeof init == "undefined")
  document.write("Initialization script load failed.");
//--></script>
</pre>
</body>
</html>
