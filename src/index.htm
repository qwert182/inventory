<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="robots" content="noindex, nofollow, noarchive">
<title>Inventory</title>
<script type="text/javascript">// <font color="red">Your browser doesn't seem to support JavaScript</font><!--
  "use strict";
  var $;
  if (document.getElementById) {
    $ = function (id) { return document.getElementById(id) };
  } else {
    $ = function (id) {
      var element = document.all[id];
      return (typeof element == "undefined" ? null : element);
    };
  }

  var isIE = !!(window.navigator.userAgent.indexOf("MSIE ") >= 0 || document.documentMode);

  // From "JavaScript: The Definitive Guide, 5th Edition"
  if (!Function.prototype.apply) {
    Function.prototype.apply = function (object, parameters) {
      var f = this;
      var o = object || window;
      var args = parameters || [];
      o._$_apply_$_ = f;
      var stringArgs = [];
      for (var i = 0; i < args.length; i++)
        stringArgs[i] = "args[" + i + "]";
      var arglist = stringArgs.join(",");
      var methodcall = "o._$_apply_$_(" + arglist + ");";
      var result = eval(methodcall);
      delete o._$_apply_$_;
      return result;
    };
  }

  if (!Function.prototype.call) {
    Function.prototype.call = function (object) {
      var f = this;
      var o = object || window;
      o._$_call_$_ = f;
      var stringArgs = [];
      for (var i = 1; i < arguments.length; i++)
        stringArgs[i - 1] = "arguments[" + i + "]";
      var arglist = stringArgs.join(",");
      var methodcall = "o._$_call_$_(" + arglist + ");";
      var result = eval(methodcall);
      delete o._$_call_$_;
      return result;
    };
  }

  if (!Array.prototype.push) {
    Array.prototype.push = function (element) {
      var a = this;
      var l = a.length;
      a[l] = element;
      return l + 1;
    };
  }

  if ("a".replace("a", function (c) { return "b"; }) != "b") {
    var string_replace = String.prototype.replace;
    String.prototype.replace = function (r, f) {
      var s = this;
      if (typeof f != "function")
        return string_replace.call(s, r, f);
      var s1 = string_replace.call(s, r, "@");
      var s2 = string_replace.call(s, r, "?");
      var res = "";
      var from = 0, to = 0;
      for (var i = 0; i < s1.length; ++i) {
        if (s1.charAt(i) == s2.charAt(i)) {
          ++to;
        } else {
          res += s.substring(from, to);
          if (typeof r == "string") {
            res += f(s.substring(to, to + r.length));
            to += r.length;
          } else {
            var m = s.substring(to).match(r);
            res += f(m[0]);
            to += m[0].length;
          }
          from = to;
        }
      }
      if (from != to)
        res += s.substring(from, to);
      return res;
    };
  }

  function log(text, style) {
    if (typeof log.content == "undefined")
      log.content = "";
    text = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    if (style)
      text = '<span style="' + style + '">' + text + '</span>';
    log.content += text + "\n";
    var logBar = $("logBar");
    if (logBar) {
      if (isIE)
        logBar.outerHTML = '<pre id="logBar">' + log.content + '</pre>';
      else
        logBar.innerHTML = log.content;
    } else {
      log.needUpdate = true;
    }
  }

  if (typeof XMLHttpRequest == "undefined") {
    XMLHttpRequest = function () {
      var msXMLs = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
      for (var i = 0; i < msXMLs.length; ++i) {
        var xhr = null;
        try {
          xhr = new ActiveXObject(msXMLs[i]);
        } catch (e) { }
        if (xhr) {
          log("XMLHttpRequest: using '" + msXMLs[i] + "'");
          XMLHttpRequest = new Function("return new ActiveXObject('" + msXMLs[i] + "');");
          return xhr;
        }
      }
      log("XMLHttpRequest: Cannot create XHR", "color:red;");
      return null;
    };
  }

  function init() {
    var dbConnectOpts = null;
    try {
      if (window.localStorage)
        dbConnectOpts = window.localStorage.getItem("db-connect");
    } catch (e) {
    }
    if (dbConnectOpts) {
      dbConnectOpts = JSON.parse(dbConnectOpts);
      log("init: dbConnectOpts = '" + dbConnectOpts + "'", "color:red;");
      if (!gh.init(dbConnectOpts)) {
        modules.load();
        return;
      }
    }
    modules.load("dbConnect");
  }

  window.onload = function () {
    if (init.done)
      return;
    init.done = true;
    init();
  };

  if (document.addEventListener)
    document.addEventListener("DOMContentLoaded", window.onload, false);

  // Error handling

  window.onerror = function (message, source, lineno, colno, error) {
    var str = message;
    if (source) {
      str += " (at " + source;
      if (typeof lineno != "undefined")
        str += ":" + lineno;
      if (typeof colno != "undefined")
        str += ":" + colno;
      str += ")";
    }
    if (error && error.stack)
      str += ("\n" + error.stack).replace(/\n$/, "").replace(/\n/g, "\n  ");
    log("window.onerror: " + str, "color:red;");
  };

  // Single-page application modules (TODO: rename to subpages? forms?)

  var modules = {
    load: function (newModule) {
      var hash = window.location.hash.replace(/^#/, "");
      log("modules.load(newModule=" + newModule + "): hash='" + hash + "'");
      if (!newModule)
        newModule = hash;
      if (!newModule)
        newModule = "main";
      if (modules.current === newModule) {
        log("modules.load: skip loading '" + newModule + "'", "color:gray;");
        return;
      }
      log("modules.load: loading '" + newModule + "'");
      modules.current = newModule;
      modules[newModule]();
      if (hash != newModule)
        window.location.replace("#" + newModule);
    }
  };

  modules.dbConnect = function () {
    $("mainContent").innerHTML =
      '<form name="dbConnect" action="javascript:void(0);" onsubmit="return modules.dbConnect.onSubmit(this);">' +
        '<label for="dbConnectURL">URL:</label>' +
        '<input type="text" id="dbConnectURL"' +
        ' pattern="' + modules.dbConnect.urlPattern + '"' +
        ' title="GitHub is supported only" required/>' + '<br>' +
        '<label for="dbConnectToken">Token:</label>' +
        '<input type="password" id="dbConnectToken" required/>' + '<br>' +
        '<button type="submit">Connect</button>' +
      '</form>';
  };

  modules.dbConnect.urlPattern = "(https:\\/\\/)(github[.]com)\\/([a-zA-Z0-9_.\\-]+)\\/([a-zA-Z0-9_.\\-]+)";

  modules.dbConnect.onSubmit = function (form) {
    var dbConnectURL = $("dbConnectURL");
    var dbConnectToken = $("dbConnectToken");
    if (!dbConnectURL.value || !dbConnectToken.value) {
      alert("A mandatory field is empty.");
      (!dbConnectURL.value ? dbConnectURL : dbConnectToken).focus();
      return false;
    }
    var dbConnectOpts = {
      url: dbConnectURL.value,
      token: dbConnectToken.value
    };
    var res;
    if (!!(res = gh.init(dbConnectOpts))) {
      alert(res);
      dbConnectURL.focus();
      return false;
    }
    if (window.localStorage)
      window.localStorage.setItem("db-connect", JSON.stringify(dbConnectOpts));
    modules.load("main");
    return true;
  };

  var gh = {
    connected: false,
    init: function (dbConnectOpts) {
      var m = dbConnectOpts.url.match(modules.dbConnect.urlPattern);
      if (!m || m.length !== 5)
        return "Invalid GitHub URL: '" + dbConnectOpts.url + "'";
      this.apiBaseUrl = m[1] + "api." + m[2]; // + "/api/v3"
      this.user = m[3];
      this.repo = m[4];
      this.token = dbConnectOpts.token;
    },
    connect: function () {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", gh.apiBaseUrl + "/repos/" + gh.user + "/" + gh.repo, true);
      xhr.setRequestHeader("Accept", "application/vnd.github+json");
      xhr.setRequestHeader("X-GitHub-Api-Version", "2022-11-28");
      xhr.setRequestHeader("Authorization", "token " + gh.token);
      xhr.setRequestHeader("If-None-Match", "\"no-cache-" + Math.random() + "\"");
      xhr.setRequestHeader("If-Modified-Since", "Sat, 01 Jan 2000 00:00:00 GMT");
      xhr.onreadystatechange = function () {
        log("modules.main: xhr.onreadystatechange(): readyState=" + xhr.readyState);
        if (xhr.readyState != 4)
          return;
        log("modules.main: xhr.onreadystatechange: " + xhr.status,
                     xhr.status >= 400 || xhr.status < 100 ? "color:orangered;" : xhr.status >= 300 ? "color:orange;" : "color:green;");
        if (xhr.status < 100 || xhr.status >= 600)
          return;
        log("modules.main: xhr.onreadystatechange: headers:\n" + xhr.getAllResponseHeaders(), "color:gray;");
        log("modules.main: xhr.onreadystatechange: response:\n" + xhr.responseText, "color:dimgray;");
        gh.default_branch = JSON.parse(xhr.responseText)["default_branch"];
        gh.connected = true;
      };
      xhr.send();
    }
  };

  modules.main = function () {
    $("mainContent").innerHTML =
      '<div id="main">' +
        '<table border="1" cellpadding="1" cellspacing="2">' +
          '<thead>' +
            '<th>1</th>' + '<th>2</th>' +
          '</thead>' +
          '<tbody>' +
            '<tr>' + '<td>1</td>' + '<td>2</td>' + '</tr>' +
          '</tbody>'
        '</table>' +
      '</div>';
    log("modules.main():");
    gh.connect();
  };

  window.onhashchange = function () {
    log("window.onhashchange: hash='" + window.location.hash + "'");
    modules.load();
  };
//--></script>
<script type="text/javascript" src="json2.js"></script>
</head>
<body>
<div id="mainContent"></div>
<pre id="logBar"><noscript style="color:red;">Please enable JavaScript in your browser otherwise this site won't work properly.</noscript>
<script type="text/javascript">//<!--
if (typeof document == "undefined" || !document.getElementById && !document.all)
  document.write("Your browser is too old to support HTML DOM API in JavaScript.\n");
if (typeof init == "undefined")
  document.write("Initialization script load failed.");
//--></script>
</pre>
</body>
</html>
